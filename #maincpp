#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <iostream>
#include <cstdlib>
#include <unistd.h> // for usleep

int main() {
    Display* display = XOpenDisplay(nullptr);
    if (!display) {
        std::cerr << "Unable to open X display" << std::endl;
        return 1;
    }

    Window root = DefaultRootWindow(display);
    XEvent event;
    int startX = 0, startY = 0, endX = 0, endY = 0;
    bool selecting = false;

    std::cout << "Click and drag to select an area on the screen." << std::endl;

    // Capture mouse input
    XGrabPointer(display, root, False, ButtonPressMask | ButtonReleaseMask | PointerMotionMask,
                 GrabModeAsync, GrabModeAsync, None, None, CurrentTime);

    while (true) {
        XNextEvent(display, &event);

        if (event.type == ButtonPress) {
            if (event.xbutton.button == Button1) { // Left mouse button
                startX = event.xbutton.x_root;
                startY = event.xbutton.y_root;
                selecting = true;
            }
        } else if (event.type == MotionNotify && selecting) {
            endX = event.xmotion.x_root;
            endY = event.xmotion.y_root;

            // Draw selection rectangle (simple console feedback here)
            std::cout << "\rSelecting area: Start(" << startX << ", " << startY
                      << "), End(" << endX << ", " << endY << ")"
                      << " Width: " << abs(endX - startX)
                      << " Height: " << abs(endY - startY) << "  " << std::flush;
        } else if (event.type == ButtonRelease) {
            if (event.xbutton.button == Button1 && selecting) {
                endX = event.xbutton.x_root;
                endY = event.xbutton.y_root;
                selecting = false;

                std::cout << "\nSelected area:\n";
                std::cout << "Start: (" << startX << ", " << startY << ")\n";
                std::cout << "End: (" << endX << ", " << endY << ")\n";
                std::cout << "Width: " << abs(endX - startX)
                          << " Height: " << abs(endY - startY) << std::endl;

                break; // Exit after selection
            }
        }
    }

    XUngrabPointer(display, CurrentTime);
    XCloseDisplay(display);
    return 0;
}
